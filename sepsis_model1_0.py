# -*- coding: utf-8 -*-
"""Sepsis_Model1.0

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KYJE-fZNI-NmnNV0i7J-XY4gVOlY_DIA
"""

import os
import numpy as np
import pandas as pd
from sklearn import model_selection
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import NearMiss
from sklearn.metrics import roc_auc_score,accuracy_score,confusion_matrix,classification_report
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression,SGDClassifier

df1 = pd.read_csv('/content/drive/My Drive/sepsisa.csv')
df2 = pd.read_csv('/content/drive/My Drive/sepsisb.csv')

df1.shape,df2.shape

df = pd.concat([df1,df2],axis=0)

df.head()

class info:
  def __init__(self,data):
    self.df=df
    print('1) Number of columns are         : ',data.shape[1])
    print('2) Number of rows are            : ',data.shape[0])
    print('3) Total number of data-points   :',data.size)
    numerical_features = [f for f in data.columns if data[f].dtypes!='O']
    print('4) Count of Numerical Features   :',len(numerical_features))
    cat_features = [c for c in data.columns if data[c].dtypes=='O']
    print('5) Count of Categorical Features :',len(cat_features))
  
  def missing_values(self,data):
    print('6) Missing values Estimation   :')
    for i in data.columns:
      if data[i].isna().sum()>0:
        print('The Feature ',i,' has '+ str(data[i].isna().sum()) + ' missing values')

a = info(df)
a.missing_values(df)

X = df.drop(columns=['SepsisLabel'],axis=1)
y = df['SepsisLabel']
X.shape,y.shape

X = df.drop(columns=['SepsisLabel'],axis=1)
y = df['SepsisLabel']
print('Dimension of X : ',X.shape,'Dimension of y :',y.shape)
#Imputing missing values
imputer = SimpleImputer(strategy="median")
imputer.fit(X)
X = imputer.transform(X)
# Train-Test splitting process
x_train,x_test,y_train,y_test = train_test_split(X,y,test_size = 0.20)
print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)

model =   RandomForestClassifier()
model.fit(x_train,y_train)
pred = model.predict(x_test)

def evaluation_metrics(pred,y_test):
  print('The Accuracy-score of the model is :',accuracy_score(pred,y_test))
  print('The AUROC score of the classifier model is :',roc_auc_score(pred,y_test))
  print('The confusion matrix is :')
  print(confusion_matrix(pred,y_test))
  print('Classification Report :')
  print(classification_report(pred,y_test))

evaluation_metrics(pred,y_test)

a = pd.DataFrame(y_test)

a.SepsisLabel.value_counts()